# Shipment Processing Workflow - Versión Simple
# Compatible con ejecución desde consola GCP

main:
  params: [input]
  steps:
    # Inicializar con valores por defecto si no vienen en el input
    - init:
        assign:
          - processing_uuid: ${default(map.get(input, "processing_uuid"), "test-uuid-default")}
          - packages: ${default(map.get(input, "packages"), [])}
          - original_file: ${default(map.get(input, "original_file"), "test.json")}
          - total_shipments: ${default(map.get(input, "total_shipments"), 0)}
          - image_service_url: "https://image-processing-simple-914439941933.us-central1.run.app"
          - email_service_url: "https://email-simple-914439941933.us-central1.run.app"
          - processed_packages: []
          - failed_packages: []
          - has_packages: false
    
    # Verificar si hay paquetes
    - check_if_packages_exist:
        switch:
          - condition: ${len(packages) > 0}
            assign:
              - has_packages: true
    
    # Procesar paquetes si existen
    - process_if_exists:
        switch:
          - condition: ${has_packages}
            steps:
              - process_all_packages:
                  for:
                    value: package_uri
                    in: ${packages}
                    steps:
                      - process_package:
                          try:
                            steps:
                              - call_processor:
                                  call: http.post
                                  args:
                                    url: ${image_service_url + "/process-package"}
                                    headers:
                                      Content-Type: "application/json"
                                    body:
                                      processing_uuid: ${processing_uuid}
                                      package_uri: ${package_uri}
                                      package_name: "package"
                                    timeout: 300
                                  result: pkg_result
                              
                              - add_success:
                                  assign:
                                    - processed_packages: ${list.concat(processed_packages, [pkg_result.body])}
                          except:
                            as: err
                            steps:
                              - add_failure:
                                  assign:
                                    - failed_packages: ${list.concat(failed_packages, [package_uri])}
    
    # Verificar estado
    - check_status:
        try:
          call: http.get
          args:
            url: ${image_service_url + "/processing-status/" + processing_uuid}
            timeout: 30
          result: status_result
        except:
          as: e
          assign:
            - status_result:
                code: 404
                body:
                  status: "not_found"
    
    # Enviar email
    - send_email:
        try:
          call: http.post
          args:
            url: ${email_service_url + "/send-completion-email"}
            headers:
              Content-Type: "application/json"
            body:
              processing_uuid: ${processing_uuid}
              original_file: ${original_file}
              total_shipments: ${total_shipments}
              packages_processed: ${len(processed_packages)}
              packages_failed: ${len(failed_packages)}
            timeout: 60
          result: email_result
        except:
          as: e
          assign:
            - email_result:
                code: 500
                body:
                  message: "email_failed"
    
    # Actualizar estado final
    - update_status:
        try:
          call: http.post
          args:
            url: ${image_service_url + "/update-workflow-completion"}
            headers:
              Content-Type: "application/json"
            body:
              processing_uuid: ${processing_uuid}
              workflow_completed: true
              packages_processed: ${len(processed_packages)}
              packages_failed: ${len(failed_packages)}
            timeout: 30
          result: update_result
        except:
          as: e
          assign:
            - update_result:
                code: 500
                body:
                  message: "update_failed"
    
    # Retornar resultado
    - return_result:
        return:
          status: "completed"
          processing_uuid: ${processing_uuid}
          packages_total: ${len(packages)}
          packages_processed: ${len(processed_packages)}
          packages_failed: ${len(failed_packages)}
          has_packages: ${has_packages}
          email_sent: ${email_result.code == 200}
          status_updated: ${update_result.code == 200}
